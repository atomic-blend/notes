name: Main Workflow

on:
  push:
    branches:
      - main

env:
  FLUTTER_VERSION: "3.35.4"
  COCOGITTO_VERSION: "6.2.0"
  OS: "debian12"

jobs:
  test-coverage:
    runs-on: [self-hosted, Linux]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true


      - name: Check for Local Path Dependencies
        run: |
          echo "Checking pubspec.yaml for local path dependencies..."
          if grep -A1 -B1 "^[[:space:]]*[a-zA-Z0-9_-]*:" pubspec.yaml | grep -q "^[[:space:]]*path:"; then
            echo "❌ ERROR: Local path dependencies found in pubspec.yaml!"
            echo "The following lines contain 'path:' references:"
            grep -n "^[[:space:]]*path:" pubspec.yaml
            echo ""
            echo "Please remove all local path dependencies before committing."
            exit 1
          else
            echo "✅ No local path dependencies found in pubspec.yaml"
          fi

      - name: Write Firebase Options
        run: |
          cat << 'EOF' > lib/firebase_options_prod.dart
          ${{ secrets.FIREBASE_OPTIONS_PROD }}
          EOF
          cat << 'EOF' > lib/firebase_options_dev.dart
          ${{ secrets.FIREBASE_OPTIONS_DEV }}
          EOF
          cat << 'EOF' > assets/configs/prod.json
          ${{ secrets.APP_CONFIG_PROD }}
          EOF
          cat << 'EOF' > assets/configs/dev.json
          ${{ secrets.APP_CONFIG_DEV }}
          EOF
        env:
          FIREBASE_OPTIONS_PROD: ${{ secrets.FIREBASE_OPTIONS_PROD }}
          FIREBASE_OPTIONS_DEV: ${{ secrets.FIREBASE_OPTIONS_DEV }}
          APP_CONFIG_PROD: ${{ secrets.APP_CONFIG_PROD }}
          APP_CONFIG_DEV: ${{ secrets.APP_CONFIG_DEV }}

      - name: Install Dependencies
        run: flutter pub get

      - name: Lint
        run: dart analyze --fatal-infos

      # - name: Run Tests with Coverage
      #   run: |
      #     dart test --coverage=coverage
      #     dart pub global activate coverage
      #     dart pub global run coverage:format_coverage --lcov --in=coverage --out=coverage.lcov --report-on=lib

      # - name: Upload Coverage Reports
      #   uses: codecov/codecov-action@v3
      #   with:
      #     files: ./coverage.lcov
      #     fail_ci_if_error: true
      #     verbose: true

  bump-version:
    needs: test-coverage
    runs-on: [self-hosted, Linux]
    outputs:
      tag: ${{ steps.released-tag.outputs.tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.email "pro@brandonguigo.com"
          git config user.name "GitHub Actions"

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Cache Cocogitto
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/cog
            ~/.cargo/registry
            ~/.cargo/bin/cargo-install-update
            ~/.cargo/bin/cargo-update
          key: cocogitto-${{ env.OS }}-${{ env.COCOGITTO_VERSION }}

      - name: Install Cocogitto
        run: |
          if [ ! -f "$HOME/.cargo/bin/cog" ]; then
            cargo install cocogitto --version ${{ env.COCOGITTO_VERSION }}
          fi
        env:
          RUSTFLAGS: --cfg procmacro2_semver_exempt

      - name: Check Conventional Commits Validity
        run: |
          $HOME/.cargo/bin/cog check

      - name: Bump Version
        run: |
          $HOME/.cargo/bin/cog bump --auto

      - name: Commit and Push Changes
        run: |
          TAG=$(git describe --abbrev=0 --tags)
          # Check if there are changes to commit
          if git diff --quiet HEAD; then
            echo "No changes to commit"
          else
            ./cog_bump.sh $TAG
            git add pubspec.yaml
            git add CHANGELOG.md
            git commit -m "chore(release): $(git describe --abbrev=0 --tags) [skip ci]"
          fi
          git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git main
          git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git tag $(git describe --abbrev=0 --tags)

      - name: Upload Changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md
      - name: Upload pubspec.yaml
        uses: actions/upload-artifact@v4
        with:
          name: pubspec
          path: pubspec.yaml
      - name: Store the tag in the output
        id: released-tag
        run: |
          TAG=$(git describe --abbrev=0 --tags)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
  build-app-for-web:
    needs: bump-version
    runs-on: [self-hosted, Linux, docker-builder]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download pubspec.yaml
        uses: actions/download-artifact@v4
        with:
          name: pubspec
          path: ./
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true
      - name: Write Firebase Options
        run: |
          cat > lib/firebase_options_prod.dart << 'EOF'
          ${{ secrets.FIREBASE_OPTIONS_PROD }}
          EOF
          
          cat > lib/firebase_options_dev.dart << 'EOF'
          ${{ secrets.FIREBASE_OPTIONS_DEV }}
          EOF
          
          cat > assets/configs/prod.json << 'EOF'
          ${{ secrets.APP_CONFIG_PROD }}
          EOF
          
          cat > assets/configs/dev.json << 'EOF'
          ${{ secrets.APP_CONFIG_DEV }}
          EOF
      - name: Build Web App
        run: |
          flutter clean
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs
          flutter build web --release -t lib/main_prod.dart --dart-define APP_ENV=prod --wasm
      - name: Upload Web App
        uses: actions/upload-artifact@v4
        with:
          name: web-app
          path: ./build/web

  build-app-for-linux:
    needs: bump-version
    runs-on: [self-hosted, Linux]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download pubspec.yaml
        uses: actions/download-artifact@v4
        with:
          name: pubspec
          path: ./
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Install dependencies
        run: |
          sudo apt-get install mesa-utils openjdk-17-jdk libcurl4-openssl-dev libsecret-1-dev libsecret-tools libsecret-1-0 clang cmake ninja-build pkg-config libgtk-3-dev -y

      - name: Write Firebase Options
        run: |
          cat > lib/firebase_options_prod.dart << 'EOF'
          ${{ secrets.FIREBASE_OPTIONS_PROD }}
          EOF
          
          cat > lib/firebase_options_dev.dart << 'EOF'
          ${{ secrets.FIREBASE_OPTIONS_DEV }}
          EOF
          
          cat > assets/configs/prod.json << 'EOF'
          ${{ secrets.APP_CONFIG_PROD }}
          EOF
          
          cat > assets/configs/dev.json << 'EOF'
          ${{ secrets.APP_CONFIG_DEV }}
          EOF
      - name: Build Web App
        run: |
          flutter clean
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs
          flutter build linux --release -t lib/main_prod.dart --dart-define APP_ENV=prod

      - name: Update version
        run: |
          sed -i "s/Version: .*/Version: ${{ needs.bump-version.outputs.tag }}/" debian/debian.yaml
          sed -i "s/Version=.*$/Version=${{ needs.bump-version.outputs.tag }}/" debian/gui/atomic-notes.desktop
      
      - name: Package Linux App
        run: |
          dart pub global activate flutter_to_debian
          flutter_to_debian
          ls -la debian/packages
      - name: Upload Linux App
        uses: actions/upload-artifact@v4
        with:
          name: linux-app
          path: debian/packages/atomic-notes_${{ needs.bump-version.outputs.tag }}_amd64.deb

  build-app-for-android:
    needs: bump-version
    runs-on: [self-hosted, Linux, docker-builder]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download pubspec.yaml
        uses: actions/download-artifact@v4
        with:
          name: pubspec
          path: ./
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Ensure unzip is installed
        run: sudo apt-get update && sudo apt-get install -y unzip

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Add rust targets
        run: |
          rustup target add \
            aarch64-linux-android \
            armv7-linux-androideabi \
            x86_64-linux-android \
            i686-linux-android 

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Install dependencies
        run: |
          sudo apt-get install mesa-utils openjdk-17-jdk libcurl4-openssl-dev libsecret-1-dev libsecret-tools libsecret-1-0 clang cmake ninja-build pkg-config libgtk-3-dev -y
          sudo apt install ruby ruby-dev -y
          sudo gem install fastlane

      - name: Write Firebase Options
        run: |
          cat > lib/firebase_options_prod.dart << 'EOF'
          ${{ secrets.FIREBASE_OPTIONS_PROD }}
          EOF
          
          cat > lib/firebase_options_dev.dart << 'EOF'
          ${{ secrets.FIREBASE_OPTIONS_DEV }}
          EOF
          
          cat > assets/configs/prod.json << 'EOF'
          ${{ secrets.APP_CONFIG_PROD }}
          EOF
          
          cat > assets/configs/dev.json << 'EOF'
          ${{ secrets.APP_CONFIG_DEV }}
          EOF

          cat > android/key.properties << 'EOF'
          ${{ secrets.KEY_PROPERTIES }}
          EOF

          echo ${{ secrets.UPLOAD_KEYSTORE }} | base64 -d > upload-keystore.jks

          cat > playstore_key.json << 'EOF'
          ${{ secrets.PLAY_STORE_KEY }}
          EOF
      - name: Configure Gradle
        run: |
          rm -f ~/.gradle/gradle.properties
          echo "org.gradle.daemon=false" >> ~/.gradle/gradle.properties
          echo "org.gradle.parallel=true" >> ~/.gradle/gradle.properties
          echo "org.gradle.configureondemand=true" >> ~/.gradle/gradle.properties
          echo "org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError" >> ~/.gradle/gradle.properties
          
      - name: Clean and prepare build
        run: |
          flutter clean
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs
          # Ensure build directories exist
          mkdir -p build/app/outputs/flutter-apk
          
      - name: Build Android App
        run: |
          cd fastlane
          fastlane android build_beta
      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-prod-release.apk
      - name: Upload Android AAB
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: build/app/outputs/bundle/prodRelease/app-prod-release.aab
  build-app-for-macos:
    needs: bump-version
    runs-on: [self-hosted, MacOS]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download pubspec.yaml
        uses: actions/download-artifact@v4
        with:
          name: pubspec
          path: ./

      - name: Write Firebase Options
        run: |
          cat > lib/firebase_options_prod.dart << 'EOF'
          ${{ secrets.FIREBASE_OPTIONS_PROD }}
          EOF
          
          cat > lib/firebase_options_dev.dart << 'EOF'
          ${{ secrets.FIREBASE_OPTIONS_DEV }}
          EOF
          
          cat > assets/configs/prod.json << 'EOF'
          ${{ secrets.APP_CONFIG_PROD }}
          EOF
          
          cat > assets/configs/dev.json << 'EOF'
          ${{ secrets.APP_CONFIG_DEV }}
          EOF

          cat > android/key.properties << 'EOF'
          ${{ secrets.KEY_PROPERTIES }}
          EOF

          mkdir -p macos/config/prod
          cat > macos/config/prod/GoogleService-Info.plist << 'EOF'
          ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_PROD }}
          EOF
          cat > macos/Runner/GoogleService-Info.plist << 'EOF'
          ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_PROD }}
          EOF


      - name: Clean and prepare build
        run: |
          # Ruby + CocoaPods environment
          export PATH="/opt/homebrew/bin:/opt/homebrew/opt/ruby/bin:$PATH"
          export GEM_HOME="/opt/homebrew/lib/ruby/gems/3.4.0"
          export GEM_PATH="/opt/homebrew/lib/ruby/gems/3.4.0"

          # FVM Flutter
          export PATH="/Users/brandonguigo/fvm/versions/stable/bin:$PATH"

          flutter clean
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs
          
      - name: Build MacOS App
        run: |
          # Set Ruby and CocoaPods environment variables - use Homebrew Ruby exclusively
          export PATH="/opt/homebrew/bin:/opt/homebrew/opt/ruby/bin:/opt/homebrew/lib/ruby/gems/3.4.0/bin:$PATH"
          export GEM_HOME="/opt/homebrew/lib/ruby/gems/3.4.0"
          export GEM_PATH="/opt/homebrew/lib/ruby/gems/3.4.0"

          # Ensure FVM Flutter is in the PATH
          export PATH="/Users/brandonguigo/fvm/versions/stable/bin:$PATH"

          flutter build macos --release -t lib/main_prod.dart --dart-define APP_ENV=prod --flavor prod
      
      - name: Package MacOS App
        run: |
          npm install -g appdmg
          appdmg macos_dmg/config.json macos_dmg/AtomicNotes.dmg
          mv macos_dmg/AtomicNotes.dmg macos_dmg/atomic-notes-${{ needs.bump-version.outputs.tag }}-macos.dmg

      - name: Upload MacOS App
        uses: actions/upload-artifact@v4
        with:
          name: macos-app
          path: macos_dmg/atomic-notes-${{ needs.bump-version.outputs.tag }}-macos.dmg
  build-app-for-ios:
    needs: bump-version
    runs-on: [self-hosted, MacOS]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download pubspec.yaml
        uses: actions/download-artifact@v4
        with:
          name: pubspec
          path: ./

      - name: Write Firebase Options
        run: |
          cat > lib/firebase_options_prod.dart << 'EOF'
          ${{ secrets.FIREBASE_OPTIONS_PROD }}
          EOF
          
          cat > lib/firebase_options_dev.dart << 'EOF'
          ${{ secrets.FIREBASE_OPTIONS_DEV }}
          EOF
          
          cat > assets/configs/prod.json << 'EOF'
          ${{ secrets.APP_CONFIG_PROD }}
          EOF
          
          cat > assets/configs/dev.json << 'EOF'
          ${{ secrets.APP_CONFIG_DEV }}
          EOF

          mkdir -p ios/config/prod
          cat > ios/config/prod/GoogleService-Info.plist << 'EOF'
          ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_PROD }}
          EOF
          cat > ios/Runner/GoogleService-Info.plist << 'EOF'
          ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_PROD }}
          EOF

      - name: Clean and prepare build
        run: |
          # Ruby + CocoaPods environment
          export PATH="/opt/homebrew/bin:/opt/homebrew/opt/ruby/bin:$PATH"
          export GEM_HOME="/opt/homebrew/lib/ruby/gems/3.4.0"
          export GEM_PATH="/opt/homebrew/lib/ruby/gems/3.4.0"

          # FVM Flutter
          export PATH="/Users/brandonguigo/fvm/versions/stable/bin:$PATH"

          flutter clean
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs
          
      - name: Build iOS App
        run: |
          # Set Ruby and CocoaPods environment variables - use Homebrew Ruby exclusively
          export PATH="/opt/homebrew/bin:/opt/homebrew/opt/ruby/bin:/opt/homebrew/lib/ruby/gems/3.4.0/bin:$PATH"
          export GEM_HOME="/opt/homebrew/lib/ruby/gems/3.4.0"
          export GEM_PATH="/opt/homebrew/lib/ruby/gems/3.4.0"

          # Ensure FVM Flutter is in the PATH
          export PATH="/Users/brandonguigo/fvm/versions/stable/bin:$PATH"

          flutter build ipa --release -t lib/main_prod.dart --dart-define APP_ENV=prod --flavor prod
      
      - name: Upload iOS App
        uses: actions/upload-artifact@v4
        with:
          name: ios-app
          path: "build/ios/ipa/Atomic Notes.ipa"

  build-app-for-windows:
    needs: bump-version
    runs-on: [self-hosted, Windows]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download pubspec.yaml
        uses: actions/download-artifact@v4
        with:
          name: pubspec
          path: ./
      - name: Write Firebase Options
        run: |
          $firebaseOptionsProd = @"
          ${{ secrets.FIREBASE_OPTIONS_PROD }}
          "@
          Set-Content -Path "lib/firebase_options_prod.dart" -Value $firebaseOptionsProd -NoNewline
          
          $firebaseOptionsDev = @"
          ${{ secrets.FIREBASE_OPTIONS_DEV }}
          "@
          Set-Content -Path "lib/firebase_options_dev.dart" -Value $firebaseOptionsDev -NoNewline
          
          $appConfigProd = @"
          ${{ secrets.APP_CONFIG_PROD }}
          "@
          Set-Content -Path "assets/configs/prod.json" -Value $appConfigProd -NoNewline
          
          $appConfigDev = @"
          ${{ secrets.APP_CONFIG_DEV }}
          "@
          Set-Content -Path "assets/configs/dev.json" -Value $appConfigDev -NoNewline

      - name: Clean and prepare build
        run: |
          $flutterpath = "$env:HOME\devtools\flutter\bin"
          $env:PATH += ";$flutterpath"
          flutter clean
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs
          
      - name: Build Windows App
        run: |
          $flutterpath = "$env:HOME\devtools\flutter\bin"
          $env:PATH += ";$flutterpath"
          flutter build windows --release -t lib/main_prod.dart --dart-define APP_ENV=prod
      
      - name: Package Windows App
        run: |
          $innopath = "C:\Program Files (x86)\Inno Setup 6"
          $env:PATH += ";$innopath"
          iscc .\innosetup.iss
          mv output\AtomicNotesInstaller.exe output\atomic-notes-${{ needs.bump-version.outputs.tag }}-windows-installer.exe
      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-app
          path: output\atomic-notes-${{ needs.bump-version.outputs.tag }}-windows-installer.exe


  publish-android-app:
    needs: 
      - bump-version
      - build-app-for-linux
      - build-app-for-web
      - build-app-for-windows
      - build-app-for-android
      - build-app-for-macos
      - build-app-for-ios
    runs-on: [self-hosted, Linux]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
    
      - name: Download Web App Artifact
        uses: actions/download-artifact@v4
        with:
          name: android-aab
          path: ./build/app/outputs/bundle/prodRelease/
      - name: Download pubspec.yaml
        uses: actions/download-artifact@v4
        with:
          name: pubspec
          path: ./
      - name: Write Play Store Key
        run: |
          cat > playstore_key.json << 'EOF'
          ${{ secrets.PLAY_STORE_KEY }}
          EOF

      - name: Publish Android App to Play Store
        continue-on-error: true
        run: |
          cd fastlane
          fastlane android upload_beta
  publish-ios-app:
    needs: 
      - bump-version
      - build-app-for-linux
      - build-app-for-web
      - build-app-for-windows
      - build-app-for-android
      - build-app-for-macos
      - build-app-for-ios
    runs-on: [self-hosted, MacOS]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
    
      - name: Download iOS App Artifact
        uses: actions/download-artifact@v4
        with:
          name: ios-app
          path: build/ios/ipa
      - name: Download pubspec.yaml
        uses: actions/download-artifact@v4
        with:
          name: pubspec
          path: ./

      - name: Publish iOS App to TestFlight
        continue-on-error: true
        run: |
          cd fastlane
          export PATH="$PATH:/opt/homebrew/bin"
          fastlane ios upload_beta
  

  publish-docker-images:
    needs: 
      - bump-version
      - build-app-for-linux
      - build-app-for-android
      - build-app-for-web
      - build-app-for-windows
      - build-app-for-macos
      - build-app-for-ios
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v7
          - linux/arm/v6
    runs-on: [self-hosted, Linux]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
    
      - name: Download Web App Artifact
        uses: actions/download-artifact@v4
        with:
          name: web-app
          path: ./build/web

  
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile-prod
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ghcr.io/atomic-blend/notes-app:${{ needs.bump-version.outputs.tag }}


  create-github-release:
    needs: 
      - bump-version
      - publish-docker-images
      - publish-android-app
      - publish-ios-app
    runs-on: [self-hosted, Linux]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog
          path: ./
      - name: Download pubspec.yaml
        uses: actions/download-artifact@v4
        with:
          name: pubspec
          path: ./

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "stable"
      - name: Download Linux App Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-app
          path: ./debian/packages/
      - name: Download Windows App Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-app
          path: ./output/

      - name: Download Android App Artifact
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: ./build/app/outputs/flutter-apk/
      - name: Rename the Android App file
        run: |
          mv build/app/outputs/flutter-apk/app-prod-release.apk build/app/outputs/flutter-apk/atomic-notes-${{ needs.bump-version.outputs.tag }}.apk

      - name: Download MacOS App Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-app
          path: ./macos_dmg/

      - name: Install ghr
        run: |
          go install github.com/tcnksm/ghr@latest
      
      - name: Create GitHub Release
        run: |
          echo "Creating GitHub release"
          TAG=${{ needs.bump-version.outputs.tag }}
          echo "Release tag: $TAG"

          # Extract changelog for the current version - improved approach
          # Handle tags with or without 'v' prefix
          CLEAN_TAG=$(echo "$TAG" | sed 's/^v//')
          echo "Clean tag for changelog matching: $CLEAN_TAG"

          CHANGELOG=""
          if [ -f "CHANGELOG.md" ]; then
            # First try exact match with the tag format in the file
            CHANGELOG=$(sed -n "/^## $TAG - /,/^## /p" CHANGELOG.md | sed '1d;$d')
          
            # If nothing found, try without the 'v' prefix
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG=$(sed -n "/^## $CLEAN_TAG - /,/^## /p" CHANGELOG.md | sed '1d;$d')
            fi
          
            # If still nothing, look for formats like [x.y.z]
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG=$(sed -n "/^## \[$CLEAN_TAG\] - /,/^## /p" CHANGELOG.md | sed '1d;$d')
            fi
          fi

          echo "CHANGELOG content:"
          echo "$CHANGELOG"

          echo "$CHANGELOG" >> release_notes.md

          echo "Release notes: $(cat release_notes.md)"

          # Use GitHub's built-in release creation
          gh release create $TAG \
            --title "v$TAG" \
            --notes "$(cat release_notes.md)" \
            --target ${{ github.sha }}

          # Upload linux app
          gh release upload $TAG "debian/packages/atomic-notes_${TAG}_amd64.deb"

          # Upload android app
          gh release upload $TAG "build/app/outputs/flutter-apk/atomic-notes-${TAG}.apk"

          # Upload windows app
          gh release upload $TAG "output/atomic-notes-${TAG}-windows-installer.exe"

          # Upload macos app
          gh release upload $TAG "macos_dmg/atomic-notes-${TAG}-macos.dmg"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
